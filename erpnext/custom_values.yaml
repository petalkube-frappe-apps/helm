# values.yaml â€” ERPNext with external MariaDB Galera + in-cluster NFS (RWX)
# - RWX for sites/logs/worker -> StorageClass "nfs"
# - RWO for redis -> StorageClass "oci-bv"
# - Internal MariaDB disabled; use external Galera service
# - Light resource/replica profile for 3x 6-GB nodes

# -----------------------
# Custom Image Repository
# -----------------------
image:
  repository: docker.io/harrismajeed/erpnext-custom
  tag: v2
  pullPolicy: IfNotPresent

# Uncomment and configure if your custom registry requires authentication
# imagePullSecrets:
#   - name: your-registry-secret

# -----------------------
# Storage (PVCs)
# -----------------------
persistence:
  sites:
    storageClass: "nfs"               # your in-cluster NFS RWX class
    accessMode: "ReadWriteMany"
    size: 10Gi
  logs:
    storageClass: "nfs"
    accessMode: "ReadWriteMany"
    size: 2Gi
  worker:
    storageClass: "nfs"
    accessMode: "ReadWriteMany"
    size: 2Gi

  # DB is external (Galera). Keep Redis on block volume (RWO).
  redis:
    storageClass: "oci-bv"
    accessMode: "ReadWriteOnce"
    size: 2Gi

# -----------------------
# Database config (external Galera)
# -----------------------
mariadb:
  enabled: false

externalDatabase:
  enabled: true
  host: mariadb-galera.db.svc.cluster.local   # <-- ClusterIP service name in the "db" namespace
  port: 3306
  user: erpnext
  password: "petalErpSafe47"                 # <-- match the user/password you set in Galera
  database: erpnext

# ---- Redis Cache (bitnamilegacy) ----
redis-cache:
  image:
    registry: docker.io
    repository: bitnamilegacy/redis
    tag: "7.0.12-debian-11-r19"
    pullPolicy: IfNotPresent

redis-queue:
  image:
    registry: docker.io
    repository: bitnamilegacy/redis
    tag: "7.0.12-debian-11-r19"
    pullPolicy: IfNotPresent
    
dbType: "mariadb"
dbHost: "mariadb-galera.db.svc.cluster.local"
dbPort: "3306"
dbRootUser: "root"
dbRootPassword: "petalErpSafe47"    

jobs:
  volumePermissions:
    enabled: true

# Soft anti-affinity so pods spread across nodes when possible
affinity:
  podAntiAffinityPreset: soft


ingress:
  enabled: true
  ingressName: "erp-example-com"
  namespace: erpnext
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  hosts:
  - host: erp.localtest.me
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls:
   - secretName: erp-example-com-tls
     hosts:
       - erp.localtest.me

nginx:
  lifecycle:
    postStart:
      exec:
        command: ["/bin/sh", "-c", "bench build --force"]
